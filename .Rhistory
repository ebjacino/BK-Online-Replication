summarise(global_bias = sum(choice_number)/n()) %>%
group_by(Range) %>%
summarize(mean_bias = mean(global_bias),
sd_bias = sd(global_bias),
se_bias=sd_bias/sqrt(n()),
N=n()) %>% ungroup()
View(LG_bias_data)
unique(LG_data_df$ID) #at 96 Dec 6
library(dplyr)
library(stringr)
library(tidyverse)
library(bbmle)      # for ICtab()
library(readxl)
library("writexl")
library(ggplot2)
library(ggpubr)
left_key = "z"
right_key = "m"
round_any <- function(x, accuracy, f=round){f(x/ accuracy) * accuracy}
correct_stim_list = c("sound/baba_rep.wav" = "bouba",
"sound/gaga_rep.wav" = "bouba",
"sound/keekee.wav" = "kiki",
"sound/teetee.wav" = "kiki")
which_is_correct <- function(stimuli,lefts,rights) {
#Make a new vector the same length as the number of rows
correct_vec <- rep(NA,length(stimuli))
#For each row in the dataset....
for(i in seq(1:length(stimuli))){
#Get the correct type ("Bouba" or "Kiki") by checking in the stim list
correct_type <- correct_stim_list[stimuli[i]]
#If the correct type is in the left one the correct key was the left key
if(grepl(correct_type, lefts[i], fixed = TRUE)){
correct_key <- left_key
}
#If the correct type is in the right one the correct key was the right key
else if(grepl(correct_type, rights[i], fixed = TRUE)){
correct_key <- right_key
}
#If it isn't in either something has gone wrong so you'll get an NA
else{
correct_key <- NA
}
#Put that correct key in the output vector
correct_vec[i] <- correct_key
}
#Return the final filled in vector
return(correct_vec)
}
#look at the results files
rds_files <- list.files("LG_DI_five_rds",
pattern = "\\.rds$",
full.names = TRUE)
rds_files
for(file in rds_files){
print(file)
file_id <- str_extract(file,"b[kl]g\\d\\d\\d")
data <- readRDS(file)
#assign ID
participant_ID <- data$results$`sp_id`[[1]]
main_data <- data$results$`Main page`[[1]]
df <- read.table(text = main_data, sep =",", header = TRUE, stringsAsFactors = FALSE)
#df is the raw data, tells you stimulus and responses
##Ben Code ***creating tidy data and choice bias score***
#First remove unneeded columns
data_cols <- df %>% dplyr::select(c(trial_type,stimulus,response,left_image,right_image,correct_response,correct))
#Then Filter practice and experimental trials
data_prac <- data_cols %>% filter(grepl("Prac", stimulus, fixed = TRUE))
data_exp <- data_cols %>% filter(!grepl("Prac", stimulus, fixed = TRUE)) %>%
filter(trial_type  %in% c("bouba-kiki","image-keyboard-response")) %>%
filter(stimulus != "img/fixation.png")
#filter out BK data
data_exp_bk <-data_exp %>% filter(trial_type == "bouba-kiki")
#filter out the LG data
data_exp_lg <-data_exp %>% filter(trial_type =="image-keyboard-response") %>%
dplyr::select(c(trial_type, stimulus, response))
#Now write a function to find if the left or the right image is "correct"
data_exp_bk <- data_exp_bk %>% mutate(correct_response = which_is_correct(stimulus,left_image,right_image))
data_exp_bk <- data_exp_bk %>% mutate(correct = ifelse(correct_response == response,
1,
ifelse(response == left_key | response == right_key,
0,
NA)))
data_exp_bk <- data_exp_bk %>% mutate(sound = ifelse(stimulus %in% c("sound/baba_rep.wav","sound/gaga_rep.wav"),
"round",
ifelse(stimulus %in% c("sound/teetee.wav","sound/keekee.wav"),
"spiky",
NA))) %>%
filter(!is.na(correct))
#adding columns to LG files to do analysis ############
data_exp_lg <- data_exp_lg %>% separate(stimulus, c("type","image_ID"), sep = "/")
data_exp_lg <- data_exp_lg %>% group_by(type) %>%
mutate(trial_num = row_number()) %>%
ungroup() %>%
pivot_wider(names_from = type, values_from = c(image_ID,response)) %>%
dplyr::select(!c(trial_type,response_targets))
#file_path_bk <- paste0("LG CSV files Looped/",file_id,"_bk.csv")
file_path_lg <- paste0("LG_DI_five_csv/",file_id,"_lg.csv")
#file_path_prac <- paste0("LG practice trials/",file_id,".csv")
#write.csv(data_prac, file_path_prac)
#write.csv(data_exp_bk, file_path_bk)
write.csv(data_exp_lg, file_path_lg)
}
#file_path_prac <- paste0("LG practice trials/",file_id,".csv")
write.csv(data_prac, file_path_prac)
file_path_prac <- paste0("LG practice trials/",file_id,".csv")
write.csv(data_prac, file_path_prac)
all_files <- list.files("LG_DI_five_csv")
first_file <- TRUE
#Adds ID code onto each trial, binds all individual csvs into one large dataframe
for(i in 1:length(all_files)){
if(grepl("lg",all_files[i])){
print(all_files[i])
if(first_file){
LG_data_df <- read.csv(paste0("LG_DI_five_csv/",all_files[i]))
LG_data_df <- LG_data_df %>% mutate(ID = substr(all_files[i],1,6))
first_file <- FALSE
}
else{
LGnew_data_df <- read.csv(paste0("LG_DI_five_csv/",all_files[i]))
LGnew_data_df <- LGnew_data_df %>% mutate(ID = substr(all_files[i],1,6))
LG_data_df <- rbind(LG_data_df,LGnew_data_df)
}
}
}
unique(LG_data_df$ID) #at 96 Dec 6
#load in the tables of targets and pairs descriptions
target_table <- read_excel("LG_target_table.xlsx")
pairs_table <- read_excel("LG_pair_table.xlsx")
age_table <- read_excel("LG_ages_5.xlsx")
age_table <- age_table %>% mutate(ID = tolower(ID)) #%>% select(ID,Age,Range)
#full_join to combine
LG_data_df_combined <- full_join(LG_data_df,target_table, by="image_ID_targets")
#LG_data_df has no confound image IDs so they are populating as NAs
LG_data_df_combined <- full_join(LG_data_df_combined,pairs_table, by="image_ID_pairs")%>%
filter(!is.na(ID))
LG_data_df_combined <- full_join(LG_data_df_combined,age_table, by="ID")
#if the the global choice is on the left and they make the "z" response, then put G in the choice column, etc
LG_data_df_combined_bias <- LG_data_df_combined %>% mutate(choice = ifelse(response_pairs == left_key &
target_global == pair_left_global,
"global",
ifelse(response_pairs == left_key &
target_local == pair_left_local,
"local",
ifelse(response_pairs == right_key &
target_global == pair_right_global,
"global",
ifelse(response_pairs == right_key &
target_local == pair_right_local,
"local",
NA)))))
LG_data_df_combined_bias <- LG_data_df_combined_bias %>% filter(!is.na(choice))
LG_data_df_combined_bias <- LG_data_df_combined_bias %>% mutate(choice_number = ifelse(choice == "global", 1, 0)) %>%
filter(!is.na(choice))
View(LG_data_df_combined_bias)
#need to check about the number of trials each participant got
trial_counts <- LG_data_df_combined_bias %>% group_by(ID) %>%
summarize(trial_counts = n()) %>%
ungroup() %>%
summarize(mean = mean(trial_counts),
sd = sd(trial_counts),
se = sd/sqrt(n()))
View(trial_counts)
LG_data_df_combined_bias %>% group_by(ID) %>% count(choice)
LG_count <-LG_data_df_combined_bias %>% group_by(ID) %>% count(choice)
LG_count_p <- LG_count %>% pivot_wider(names_from = choice, values_from = n) %>% mutate_all(~replace(., is.na(.), 0))
#new column with local-global
LG_count_p <- LG_count_p %>% mutate(GminusL = global-local) %>% mutate(LG_group = ifelse(GminusL >0, "global", "local"))
LG_poirel_all <- full_join(LG_data_df_combined_bias, LG_count_p, by ="ID")
#to count choice bias and see how many participants are in each age range
LG_bias_data <- LG_data_df_combined_bias %>% group_by(ID,Range) %>%
summarise(global_bias = sum(choice_number)/n()) %>%
group_by(Range) %>%
summarize(mean_bias = mean(global_bias),
sd_bias = sd(global_bias),
se_bias=sd_bias/sqrt(n()),
N=n()) %>% ungroup()
View(LG_bias_data)
#2 rows for each Range, one local and one global
#instead of LG_poirel_all, try summarizing from an already summarized across participant df
LG_bias_poirel <- LG_poirel_all %>% group_by(ID,Range, LG_group) %>%
summarise(GminusL = mean(GminusL)) %>%
ungroup() %>%
group_by(Range, LG_group) %>%
summarize(mean_bias = mean(GminusL),
sd_bias = sd(GminusL),
n = n(),
se_bias=sd_bias/sqrt(n())) %>% ungroup()
LG_bias_poirel_one_row <- LG_poirel_all %>% group_by(ID,Range, LG_group) %>%
summarise(GminusL = mean(GminusL))
#calculating the points that go on the graph
LG_poirel_points <- LG_poirel_all  %>% group_by(ID,Range, LG_group) %>%
mutate(bias_round = round_any(GminusL,5)) %>%  ungroup() %>%
group_by(Range,bias_round,LG_group) %>%
summarise(Count = length(unique(ID)))
View(LG_poirel_points)
#counting number of participants
LG_group_count <- LG_poirel_all %>% group_by(Range, LG_group) %>% summarise(
count = length(unique(ID)))
LG_group_count_p <- full_join(LG_group_count, LG_bias_data, by="Range")
#proportion = number in l/g group divided by total N participants in age range #######################
LG_group_count_p <- LG_group_count_p %>% mutate(proportion = count/N)
#average values!! average of GminusL for each age range################
LG_weighted_avg <- LG_poirel_all %>% group_by(ID,Range) %>%
summarise(GminusL = mean(GminusL)) %>%
ungroup() %>%
group_by(Range) %>%
summarise(avg_bias = mean(GminusL),
sd_bias = sd(GminusL, na.rm = TRUE),
se_bias=sd_bias/sqrt(n()),
N = n()) %>% ungroup()
#make one data set with one row for each participant
LG_average_gminusl <- LG_poirel_all %>% group_by(ID,Range) %>%
summarise(GminusL = mean(GminusL))
#GRAPH TIME
LG_poirel_plot <-ggplot() +
geom_col(LG_bias_poirel, mapping = aes(x = interaction(LG_group,Range), y = mean_bias), color = "black", fill = NA) +
geom_point(LG_poirel_points, mapping = aes(x = interaction(LG_group,Range), y = bias_round, size = Count, color = Range)) +
geom_col(LG_bias_poirel, mapping = aes(x = interaction(LG_group,Range), y = mean_bias, fill = Range), alpha = 0.5) +
geom_point(LG_bias_poirel, mapping = aes(x = interaction(LG_group,Range), y = mean_bias)) +
geom_errorbar(LG_bias_poirel, mapping = aes(x = interaction(LG_group,Range), y = mean_bias, ymin = mean_bias-se_bias, ymax = mean_bias+se_bias), alpha = 1, width = .75) +
theme_classic() +
#facet_wrap("Range") +
ylab("Global Bias") +
xlab("global and local groups in each age range") +
ylab("<local bias, global bias>")
LG_poirel_plot
####average GminusL for each age range
LG_poirel_plot2 <-ggplot() +
geom_col(LG_weighted_avg, mapping = aes(x = Range, y = avg_bias), color = "black", fill = NA) +
geom_col(LG_weighted_avg, mapping = aes(x = Range, y = avg_bias, fill = Range), alpha = 0.5) +
geom_errorbar(LG_weighted_avg, mapping = aes(x = Range, y = avg_bias, ymin = avg_bias-se_bias,
ymax = avg_bias+se_bias), alpha = 1, width = .75) +
geom_jitter(LG_bias_poirel_one_row, mapping = aes(x = Range, y = GminusL)) +
theme_light() +
ylab("Global Bias") +
#scale_color_manual(values = rev(cols)) +
#scale_fill_manual(values = rev(cols)) +
xlab("global and local groups in each age range") +
ylab("<local bias, global bias>")
LG_poirel_plot2
View(LG_poirel_all)
View(LG_bias_poirel_one_row)
lgm1 <- glmer(GminusL ~ 0+Range:LG_group + (1|ID), data = LG_bias_poirel_one_row)
left_key = "z"
library(lme4)       #for glmer
lgm1 <- glmer(GminusL ~ 0+Range:LG_group + (1|ID), data = LG_bias_poirel_one_row)
summary(lgm1)
lgm1 <- glm(GminusL ~ 0+Range:LG_group, data = LG_bias_poirel_one_row)
summary(lgm1)
View(LG_weighted_avg)
View(LG_group_count_p)
lgm1 <- glm(GminusL ~ 0+Range:LG_group, data = LG_bias_poirel_one_row)
summary(lgm1)
lgm1 <- glm(GminusL ~ 0+Range:GminusL, data = LG_bias_poirel_one_row)
summary(lgm1)
#checking
age_group <- LG_bias_poirel_one_row %>% filter(LG_group == "local") %>% filter(Range == "5")
# One-sample t-test
res <- t.test(age_group$GminusL, mu = 0)
# Printing the results: significantly different from zero
res
#checking
age_group <- LG_bias_poirel_one_row %>% filter(Range == "5")
# One-sample t-test
res <- t.test(age_group$GminusL, mu = 0)
# Printing the results: significantly different from zero
res
lgm1 <- glm(GminusL ~ 0+Range:GminusL, data = LG_bias_poirel_one_row)
summary(lgm1)
lgm1 <- lmer(GminusL ~ 0+Range:GminusL, data = LG_bias_poirel_one_row)
library(car)        # for Anova()
library(emmeans)
#by range
lgm_mult_b <- aov(GminusL ~ Range, data = LG_average_gminusl)
#### are the weighted averages different from each other? LG_average_gminusl dataset
Anova(lgm_mult_b)
summary(lgm_mult_b)
summary(lgm_mult_b)
TukeyHSD(lgm_mult_b)
View(LG_average_gminusl)
lgm1 <- glm(GminusL ~ 0+Range:GminusL, data = LG_bias_poirel_one_row)
summary(lgm1)
#checking
age_group <- LG_bias_poirel_one_row %>% filter(Range == "5")
# One-sample t-test
res <- t.test(age_group$GminusL, mu = 0)
# Printing the results: significantly different from zero
res
summary(lgm1)
lgm1 <- glm(GminusL ~ 0+Range:GminusL, data = LG_bias_poirel_one_row)
Anova(lgm1)
summary(lgm1)
lgm1 <- glm(GminusL ~ 0 + Range:GminusL, data = LG_bias_poirel_one_row)
lgm1 <- glm(GminusL ~ 0 + Range, data = LG_bias_poirel_one_row)
summary(lgm1)
####average GminusL for each age range
LG_poirel_plot2 <-ggplot() +
geom_col(LG_weighted_avg, mapping = aes(x = Range, y = avg_bias), color = "black", fill = NA) +
geom_col(LG_weighted_avg, mapping = aes(x = Range, y = avg_bias, fill = Range), alpha = 0.5) +
geom_errorbar(LG_weighted_avg, mapping = aes(x = Range, y = avg_bias, ymin = avg_bias-se_bias,
ymax = avg_bias+se_bias), alpha = 1, width = .75) +
geom_jitter(LG_bias_poirel_one_row, mapping = aes(x = Range, y = GminusL)) +
theme_light() +
ylab("Global Bias") +
#scale_color_manual(values = rev(cols)) +
#scale_fill_manual(values = rev(cols)) +
xlab("global and local groups in each age range") +
ylab("<- local bias, global bias ->")
LG_poirel_plot2
lgm1 <- glm(GminusL ~ 0 + Range, data = LG_bias_poirel_one_row)
summary(lgm1)
Anova(lgm1)
summary(lgm1)
contrast(emmeans(lgm1, ~ Range) , method = "pairwise", type = "response")
#look at the results files
rds_files <- list.files("LG_DI_five_rds",
pattern = "\\.rds$",
full.names = TRUE)
rds_files
for(file in rds_files){
print(file)
file_id <- str_extract(file,"b[kl]g\\d\\d\\d")
data <- readRDS(file)
#assign ID
participant_ID <- data$results$`sp_id`[[1]]
main_data <- data$results$`Main page`[[1]]
df <- read.table(text = main_data, sep =",", header = TRUE, stringsAsFactors = FALSE)
#df is the raw data, tells you stimulus and responses
##Ben Code ***creating tidy data and choice bias score***
#First remove unneeded columns
data_cols <- df %>% select(c(trial_type,stimulus,response,left_image,right_image,correct_response,correct))
#Then Filter practice and experimental trials
data_prac <- data_cols %>% filter(grepl("Prac", stimulus, fixed = TRUE))
data_exp <- data_cols %>% filter(!grepl("Prac", stimulus, fixed = TRUE)) %>%
filter(trial_type  %in% c("bouba-kiki","image-keyboard-response")) %>%
filter(stimulus != "img/fixation.png")
#filter out BK data
data_exp_bk <-data_exp %>% filter(trial_type == "bouba-kiki")
#filter out the LG data
data_exp_lg <-data_exp %>% filter(trial_type =="image-keyboard-response") %>%
select(c(trial_type, stimulus, response))
#Now write a function to find if the left or the right image is "correct"
data_exp_bk <- data_exp_bk %>% mutate(correct_response = which_is_correct(stimulus,left_image,right_image))
data_exp_bk <- data_exp_bk %>% mutate(correct = ifelse(correct_response == response,
1,
ifelse(response == left_key | response == right_key,
0,
NA)))
data_exp_bk <- data_exp_bk %>% mutate(sound = ifelse(stimulus %in% c("sound/baba_rep.wav","sound/gaga_rep.wav"),
"round",
ifelse(stimulus %in% c("sound/teetee.wav","sound/keekee.wav"),
"spiky",
NA))) %>%
filter(!is.na(correct))
#adding columns to LG files to do analysis ############
data_exp_lg <- data_exp_lg %>% separate(stimulus, c("type","image_ID"), sep = "/")
data_exp_lg <- data_exp_lg %>% group_by(type) %>%
mutate(trial_num = row_number()) %>%
ungroup() %>%
pivot_wider(names_from = type, values_from = c(image_ID,response)) %>%
select(!c(trial_type,response_targets))
file_path_bk <- paste0("LG nc plus bk/",file_id,"_bk.csv")
file_path_lg <- paste0("LG nc plus bk/",file_id,"_lg.csv")
#file_path_prac <- paste0("LG practice trials/",file_id,".csv")
#write.csv(data_prac, file_path_prac)
write.csv(data_exp_bk, file_path_bk)
write.csv(data_exp_lg, file_path_lg)
}
contrast(emmeans(m_mult_c, ~ Range | congruent) , method = "pairwise", type = "response")
library(tidyverse)
library(ggplot2)
library(lme4)       #for glmer
library(ggpubr)
library(forcats)
library(emmeans)
library(bbmle)      # for ICtab()
library(car)        # for Anova()
library(readxl)
library("writexl")
library("xlsx")
library(viridis)
library(ppcor) #for partial correlation
library(lpSolve)
library(irr) #for inter-rater reliability
library(dplyr)
library(stringr)
angular_color = "#E01A4F"
curved_color = "#FFC05C"
third_color = "#80B8EF"
congruent_color = "#56B375"
incongruent_color = "#9046CF"
#for the dots on the graphs
round_any <- function(x, accuracy, f=round){f(x/ accuracy) * accuracy}
all_files <- list.files("bko2 full paradigm CSVs")
first_file <- TRUE
#Adds ID code onto each trial, binds all individual csvs into one large dataframe
for(i in 1:length(all_files)){
if(grepl("b",all_files[i])){
print(all_files[i])
if(first_file){
all_data_df <- read.csv(paste0("bko2 full paradigm CSVs/",all_files[i]))
all_data_df <- all_data_df %>% mutate(ID = substr(all_files[i],1,6))
first_file <- FALSE
}
else{
new_data_df <- read.csv(paste0("bko2 full paradigm CSVs/",all_files[i]))
new_data_df <- new_data_df %>% mutate(ID = substr(all_files[i],1,6))
all_data_df <- rbind(all_data_df,new_data_df)
}
}
}
#filter out the NAs
all_data_df <- all_data_df %>% filter(!is.na(correct))
#use unique to check that i have all the files (e.g. 64 particpants for bko2)
#unique(all_data_df$ID)
left_key = "z"
right_key = "m"
age_table <- read_excel("bko2 age table.xlsx")
all_data_df <- full_join(all_data_df,age_table, by="ID")
WJ_scores <- read_excel("WJ scores.xlsx")
all_data_df <- full_join(all_data_df,WJ_scores, by="ID")
#CALCULATE CHOICE BIAS
#first create a new column shape_choice that has a 1 if they chose round, 0 if they chose spiky
all_data_df <- all_data_df %>% mutate(shape_choice = ifelse(grepl("bouba",left_image)  & response == left_key,
1,
ifelse(grepl("bouba",right_image)  & response == right_key, 1,
0)))
#write an excel file for all this with library("xlsx")
#write.xlsx(all_data_df, file = "bko2 all trials df.xlsx")
data_orth <- all_data_df %>% group_by(ID,sound,Range) %>%
summarise(bias = sum(shape_choice)/n()-.5)
data_all_sounds <- all_data_df %>% group_by(ID,sound,stimulus) %>%
summarise(bias = sum(shape_choice)/n()-.5)
data_vowel_type <- all_data_df %>% group_by(vowel_type, ID,Range) %>%
summarise(bias = sum(shape_choice)/n()-.5)
data_congruency = all_data_df %>% group_by(congruent, ID,Range) %>%
summarise(bias = sum(correct)/n())
data_voicing = all_data_df %>% group_by(voicing, ID,Range) %>%
summarise(bias = sum(shape_choice)/n()-.5)
data_consonant = all_data_df %>% group_by(consonant_type, ID,Range) %>%
summarise(bias = sum(shape_choice)/n()-.5)
#by range. is there a difference between bias for congruent/incongruent words for different age ranges?
m_mult_c <- glmer(correct ~ Range*congruent + (1|ID), data = all_data_df, family = "binomial")
Anova(m_mult_c)
contrast(emmeans(m_mult_c, ~ Range | congruent) , method = "pairwise", type = "response")
bko2_congruency_contrast <- as.data.frame(bko2_congruency_contrast)
bko2_congruency_contrast <-contrast(emmeans(m_mult_c, ~ Range | congruent) , method = "pairwise", type = "response")
bko2_congruency_contrast <- as.data.frame(bko2_congruency_contrast)
bko2_congruency_contrast <- bko2_congruency_contrast %>% mutate(
p.value = round(p.value,digits = 3),
z.ratio = round(z.ratio, digits = 3)) %>%
dplyr::select(!c(df,null))
#odds ratio is the effect size- if there is no difference the odds ratio is equal to 1, no effect. If it's farther from 1 in either direction it's more significant
write.xlsx(bko2_congruency_contrast, file = "bko2 tables/congruency contrast.xlsx")
contrast(emmeans(m_mult_c, ~ Range | congruent) , method = "pairwise", type = "response")
#by range. is there a difference between bias for vowel  for different age ranges?
m_mult_co <- glmer(shape_choice ~ Range*vowel_type + (1|ID), data = all_data_df, family = "binomial")
Anova(m_mult_co)
contrast(emmeans(m_mult_co, ~ Range | vowel_type) , method = "pairwise", type = "response")
bko2_vowel_contrast <-contrast(emmeans(m_mult_co, ~ Range | vowel_type) , method = "pairwise", type = "response")
bko2_vowel_contrast <- as.data.frame(bko2_vowel_contrast)
bko2_vowel_contrast <- bko2_vowel_contrast %>% mutate(
p.value = round(p.value,digits = 3),
z.ratio = round(z.ratio, digits = 3)) %>%
dplyr::select(!c(df,null))
#odds ratio is the effect size- if there is no difference the odds ratio is equal to 1, no effect. If it's farther from 1 in either direction it's more significant
write.xlsx(bko2_vowel_contrast, file = "bko2 tables/vowel contrast.xlsx")
contrast(emmeans(m_mult_co, ~ Range | vowel_type) , method = "pairwise", type = "response")
contrast(emmeans(m_mult_cv, ~ Range | voicing) , method = "pairwise", type = "response")
#by range. is there a difference between bias for vowel  for different age ranges?
m_mult_cv <- glmer(shape_choice ~ Range*voicing + (1|ID), data = all_data_df, family = "binomial")
Anova(m_mult_cv)
contrast(emmeans(m_mult_cv, ~ Range | voicing) , method = "pairwise", type = "response")
bko2_voicing_contrast <-contrast(emmeans(m_mult_cv, ~ Range | voicing) , method = "pairwise", type = "response")
bko2_voicing_contrast <- as.data.frame(bko2_voicing_contrast)
bko2_voicing_contrast <- bko2_voicing_contrast %>% mutate(
p.value = round(p.value,digits = 3),
z.ratio = round(z.ratio, digits = 3)) %>%
dplyr::select(!c(df,null))
#odds ratio is the effect size- if there is no difference the odds ratio is equal to 1, no effect. If it's farther from 1 in either direction it's more significant
write.xlsx(bko2_voicing_contrast, file = "bko2 tables/voicing contrast.xlsx")
#by range. is there a difference between bias for consonant_type  for different age ranges?
m_mult_co <- glmer(shape_choice ~ Range*consonant_type + (1|ID), data = all_data_df, family = "binomial")
Anova(m_mult_co)
contrast(emmeans(m_mult_co, ~ Range | consonant_type) , method = "pairwise", type = "response")
bko2_consonanttype_contrast <-contrast(emmeans(m_mult_co, ~ Range | consonant_type) , method = "pairwise", type = "response")
bko2_consonanttype_contrast <- as.data.frame(bko2_consonanttype_contrast)
bko2_consonanttype_contrast <- bko2_consonanttype_contrast %>% mutate(
p.value = round(p.value,digits = 3),
z.ratio = round(z.ratio, digits = 3)) %>%
dplyr::select(!c(df,null))
#odds ratio is the effect size- if there is no difference the odds ratio is equal to 1, no effect. If it's farther from 1 in either direction it's more significant
write.xlsx(bko2_consonanttype_contrast, file = "bko2 tables/consonant type contrast.xlsx")
contrast(emmeans(m_mult_co, ~ Range | consonant_type) , method = "pairwise", type = "response")
?emmeans()
contrast(emmeans(m_mult, ~ Range | sound) |> contrast() |> confint(), method = "pairwise", type = "response")
contrast(emmeans(m_mult, ~ Range | sound), |> contrast() |> confint(), method = "pairwise", type = "response")
emmeans(m_mult, ~ Range | sound) |> contrast() |> confint()
contrast(emmeans(m_mult, ~ Range | sound), method = "pairwise", type = "response", confint(lsm[[2]]))
#by range. mixed effect binary model
m_mult <- glmer(shape_choice ~ Range*sound + (1|ID), data = all_data_df, family = "binomial")
contrast(emmeans(m_mult, ~ Range | sound), method = "pairwise", type = "response", confint(lsm[[2]]))
contrast(emmeans(m_mult, ~ Range | sound), method = "pairwise", type = "response", confint(m_mult[[2]]))
contrast(emmeans(m_mult, ~ Range | sound), method = "pairwise", type = "response", confint(m_mult[2]))
contrast(emmeans(m_mult, ~ Range | sound), method = "pairwise", type = "response"), confint(m_mult[2]))
contrast(emmeans(m_mult, ~ Range | sound), method = "pairwise", type = "response"),
contrast(emmeans(m_mult, ~ Range | sound), method = "pairwise", type = "response")
contrast(lsmeans(m_mult, ~ Range | sound), method = "pairwise", type = "response")
confint(m_mult[2])
confint(m_mult)
contrast(emmeans(m_mult, ~ Range | sound), method = "pairwise", type = "response") |> confint()
version

#facet_wrap("Range") +
#ylim(-0.5,0.5) +
ylab("Global Bias") +
#scale_color_manual(values = rev(cols)) +
#scale_fill_manual(values = rev(cols)) +
xlab("global and local groups in each age range") +
ylab("<local bias, global bias>")
LG_poirel_plot3
LG_poirel_plot3 <-ggplot() +
geom_point(LG_poirel_all, mapping = aes(x = Age, y = GminusL), color = "black", fill = NA) +
#geom_col(LG_weighted_avg, mapping = aes(x = Range, y = avg_bias, fill = Range), alpha = 0.5) +
theme_light() +
#facet_wrap("Range") +
#ylim(-0.5,0.5) +
ylab("Global Bias") +
#scale_color_manual(values = rev(cols)) +
#scale_fill_manual(values = rev(cols)) +
xlab("global and local groups in each age range") +
ylab("<local bias, global bias>")
LG_poirel_plot3
LG_poirel_plot3 <-ggplot() +
geom_point(LG_poirel_all, mapping = aes(x = Age, y = GminusL), color = "black", fill = NA) +
#geom_col(LG_weighted_avg, mapping = aes(x = Range, y = avg_bias, fill = Range), alpha = 0.5) +
theme_light() +
#facet_wrap("Range") +
#ylim(-0.5,0.5) +
ylab("Global Bias") +
#scale_color_manual(values = rev(cols)) +
#scale_fill_manual(values = rev(cols)) +
xlab("global and local groups in each age range") +
ylab("<Age>")
LG_poirel_plot3
LG_poirel_plot3 <-ggplot() +
geom_point(LG_poirel_all, mapping = aes(x = Age, y = GminusL), color = "black", fill = NA) +
#geom_col(LG_weighted_avg, mapping = aes(x = Range, y = avg_bias, fill = Range), alpha = 0.5) +
theme_light() +
#facet_wrap("Range") +
#ylim(-0.5,0.5) +
ylab("Global Bias") +
#scale_color_manual(values = rev(cols)) +
#scale_fill_manual(values = rev(cols)) +
xlab("Age") +
ylab("<local bias, global bias>")
LG_poirel_plot3
#make a new dataframe with the following columns for each ID: round/spiky bias scores, GminusL scores, LG_group assignment
LG_score_only <- LG_poirel_all %>% select(ID, Age, Range, GminusL, LG_group) %>%
group_by(ID) %>% filter(row_number()==1)
View(LG_score_only)
View(bk_data_combined_bias)
BK_bias_only <- bk_data_combined_bias %>% group_by(ID) %>%
mutate(total_bias = sum(correct)/n() - 0.5) %>% select(ID, sound, total_bias) %>%
BK_LG_scores <- full_join(LG_score_only, BK_bias_only, by="ID")
BK_bias_only <- bk_data_combined_bias %>% group_by(ID) %>%
mutate(total_bias = sum(correct)/n() - 0.5) %>% select(ID, sound, total_bias)
View(BK_bias_only)
BK_bias_only <- bk_data_combined_bias %>% group_by(ID) %>%
mutate(total_bias = sum(correct)/n() - 0.5) %>% select(ID, sound, total_bias)  %>%
filter(row_number()==1)
BK_bias_only <- bk_data_combined_bias %>% group_by(ID) %>%
mutate(total_bias = sum(correct)/n() - 0.5) %>% select(ID, total_bias)  %>%
filter(row_number()==1)
BK_LG_scores <- full_join(LG_score_only, BK_bias_only, by="ID")
View(BK_LG_scores)
BK_bias_only <- bk_data_combined_bias %>% group_by(ID) %>%
mutate(total_bk_bias = sum(correct)/n() - 0.5) %>% select(ID, total_bk_bias)  %>%
filter(row_number()==1)
BK_LG_scores <- full_join(LG_score_only, BK_bias_only, by="ID")
?cor.test()
cor.test(GminusL, total_bk_bias, data = BK_LG_scores)
BK_LG_scores <- full_join(LG_score_only, BK_bias_only, by="ID")
cor.test(GminusL, total_bk_bias, data = BK_LG_scores)
cor.test(BK_LG_scores$GminusL, BK_LG_scores$total_bk_bias)
cor.test(BK_LG_scores$GminusL, BK_LG_scores$total_bk_bias, method = "pearson")
cor_plot <-  ggplot(BK_LG_scores, aes(GminusL, total_bk_bias))
cor_plot + geom_point() +
theme_light()
cor_plot + geom_point() +
theme_light()+
ylim(-0.50,0.50)
cor.test(BK_LG_scores$GminusL, BK_LG_scores$total_bk_bias, method = "pearson")
cor_plot <-  ggplot(BK_LG_scores, aes(GminusL, total_bk_bias))
cor_plot + geom_point() +
theme_light()+
ylim(-0.50,0.50)+
geom_smooth(method='lm')
cor_plot <-  ggplot(BK_LG_scores, aes(GminusL, total_bk_bias))
cor_plot + geom_point() +
theme_light()+
ylim(-0.50,0.50)+
geom_smooth(method='lm')+
ylab("BK bias in expected direction")+
xlab("<- local bias, global bias ->")
cor_plot + geom_point() +
theme_light()+
ylim(-0.50,0.50)+
geom_smooth(method='lm')+
facet_wrap(Age)
cor_plot <-  ggplot(BK_LG_scores, aes(interaction(Age,GminusL), total_bk_bias))
cor_plot + geom_point() +
theme_light()+
ylim(-0.50,0.50)+
geom_smooth(method='lm')+
facet_wrap(Age)
cor_plot + geom_point() +
theme_light()+
ylim(-0.50,0.50)+
geom_smooth(method='lm')+
facet_wrap("Age")
cor_plot + geom_point() +
theme_light()+
ylim(-0.50,0.50)+
geom_smooth(method='lm')+
facet_wrap("Range")
cor_plot <-  ggplot(BK_LG_scores, aes(GminusL, total_bk_bias))
cor_plot + geom_point() +
theme_light()+
ylim(-0.50,0.50)+
geom_smooth(method='lm')+
facet_wrap("Range")
cor_plot <-  ggplot(BK_LG_scores, aes(interaction(Range,GminusL), total_bk_bias))
cor_plot + geom_point() +
theme_light()+
ylim(-0.50,0.50)+
geom_smooth(method='lm')+
#facet_wrap("Range")
ylab("BK bias in expected direction")+
xlab("<- local bias, global bias ->")
cor_plot <-  ggplot(BK_LG_scores, aes(GminusL, total_bk_bias))
cor_plot + geom_point() +
theme_light()+
ylim(-0.50,0.50)+
geom_smooth(method='lm')+
facet_wrap("Range")
cor_plot <-  ggplot(BK_LG_scores, aes(GminusL, total_bk_bias))
cor_plot + geom_point() +
theme_light()+
ylim(-0.50,0.50)+
geom_smooth(method='lm')+
facet_wrap("Range")+
ylab("BK bias in expected direction")+
xlab("<- local bias, global bias ->")
library(dplyr)
library(readxl)
library("writexl")
library(ggplot2)
library(ggpubr)
round_any <- function(x, accuracy, f=round){f(x/ accuracy) * accuracy}
#look at the results files
rds_files_c <- list.files("LG_double_image_RDS/confound",
pattern = "\\.rds$",
full.names = TRUE)
rds_files_c
for(file in rds_files_c){
print(file)
file_id <- str_extract(file,"b[kl]g\\d\\d\\d")
data <- readRDS(file)
#assign ID
participant_ID <- data$results$`sp_id`[[1]]
main_data <- data$results$`Main page`[[1]]
df <- read.table(text = main_data, sep =",", header = TRUE, stringsAsFactors = FALSE)
#df is the raw data, tells you stimulus and responses
##Ben Code Attempt***creating tidy data and choice bias score***
#First remove unneeded columns
data_cols <- df %>% select(c(trial_type,stimulus,response,left_image,right_image,correct_response,correct))
#Then Filter practice and experimental trials
data_prac <- data_cols %>% filter(grepl("Prac", stimulus, fixed = TRUE))
data_exp <- data_cols %>% filter(!grepl("Prac", stimulus, fixed = TRUE)) %>%
filter(trial_type  %in% c("bouba-kiki","image-keyboard-response")) %>%
filter(stimulus != "img/fixation.png")
#filter out BK data
data_exp_bk <-data_exp %>% filter(trial_type == "bouba-kiki")
#filter out the LG data
data_exp_lg <-data_exp %>% filter(trial_type =="image-keyboard-response") %>%
select(c(trial_type, stimulus, response))
#Now write a function to find if the left or the right image is "correct"
data_exp_bk <- data_exp_bk %>% mutate(correct_response = which_is_correct(stimulus,left_image,right_image))
data_exp_bk <- data_exp_bk %>% mutate(correct = ifelse(correct_response == response,
1,
ifelse(response == left_key | response == right_key,
0,
NA)))
data_exp_bk <- data_exp_bk %>% mutate(sound = ifelse(stimulus %in% c("sound/baba_rep.wav","sound/gaga_rep.wav"),
"round",
ifelse(stimulus %in% c("sound/teetee.wav","sound/keekee.wav"),
"spiky",
NA))) %>%
filter(!is.na(correct))
#adding columns to LG files to do analysis ############
data_exp_lg <- data_exp_lg %>% separate(stimulus, c("type","image_ID"), sep = "/")
data_exp_lg <- data_exp_lg %>% group_by(type) %>%
mutate(trial_num = row_number()) %>%
ungroup() %>%
pivot_wider(names_from = type, values_from = c(image_ID,response)) %>%
select(!c(trial_type,response_targets))
#file_path_bk <- paste0("LG CSV files Looped/",file_id,"_bk.csv")
file_path_lg <- paste0("LG tidy csv/confound/",file_id,"_lg.csv")
#file_path_prac <- paste0("LG practice trials/",file_id,".csv")
#write.csv(data_prac, file_path_prac)
#write.csv(data_exp_bk, file_path_bk)
write.csv(data_exp_lg, file_path_lg)
}
all_files_c <- list.files("LG tidy csv/confound")
#look at the results files
rds_files_c <- list.files("LG_double_image_RDS/confound",
pattern = "\\.rds$",
full.names = TRUE)
rds_files_c
for(file in rds_files_c){
print(file)
file_id <- str_extract(file,"b[kl]g\\d\\d\\d")
data <- readRDS(file)
#assign ID
participant_ID <- data$results$`sp_id`[[1]]
main_data <- data$results$`Main page`[[1]]
df <- read.table(text = main_data, sep =",", header = TRUE, stringsAsFactors = FALSE)
#df is the raw data, tells you stimulus and responses
##Ben Code Attempt***creating tidy data and choice bias score***
#First remove unneeded columns
data_cols <- df %>% select(c(trial_type,stimulus,response,left_image,right_image,correct_response,correct))
#Then Filter practice and experimental trials
data_prac <- data_cols %>% filter(grepl("Prac", stimulus, fixed = TRUE))
data_exp <- data_cols %>% filter(!grepl("Prac", stimulus, fixed = TRUE)) %>%
filter(trial_type  %in% c("bouba-kiki","image-keyboard-response")) %>%
filter(stimulus != "img/fixation.png")
#filter out BK data
data_exp_bk <-data_exp %>% filter(trial_type == "bouba-kiki")
#filter out the LG data
data_exp_lg <-data_exp %>% filter(trial_type =="image-keyboard-response") %>%
select(c(trial_type, stimulus, response))
#Now write a function to find if the left or the right image is "correct"
data_exp_bk <- data_exp_bk %>% mutate(correct_response = which_is_correct(stimulus,left_image,right_image))
data_exp_bk <- data_exp_bk %>% mutate(correct = ifelse(correct_response == response,
1,
ifelse(response == left_key | response == right_key,
0,
NA)))
data_exp_bk <- data_exp_bk %>% mutate(sound = ifelse(stimulus %in% c("sound/baba_rep.wav","sound/gaga_rep.wav"),
"round",
ifelse(stimulus %in% c("sound/teetee.wav","sound/keekee.wav"),
"spiky",
NA))) %>%
filter(!is.na(correct))
#adding columns to LG files to do analysis ############
data_exp_lg <- data_exp_lg %>% separate(stimulus, c("type","image_ID"), sep = "/")
data_exp_lg <- data_exp_lg %>% group_by(type) %>%
mutate(trial_num = row_number()) %>%
ungroup() %>%
pivot_wider(names_from = type, values_from = c(image_ID,response)) %>%
select(!c(trial_type,response_targets))
#file_path_bk <- paste0("LG CSV files Looped/",file_id,"_bk.csv")
file_path_lg <- paste0("LG tidy csv/confound/",file_id,"_lg.csv")
#file_path_prac <- paste0("LG practice trials/",file_id,".csv")
#write.csv(data_prac, file_path_prac)
#write.csv(data_exp_bk, file_path_bk)
write.csv(data_exp_lg, file_path_lg)
}
all_files_c <- list.files("LG tidy csv/confound")
#look at the results files
rds_files_c <- list.files("LG_double_image_RDS/confound",
pattern = "\\.rds$",
full.names = TRUE)
rds_files_c
for(file in rds_files_c){
print(file)
file_id <- str_extract(file,"b[kl]g\\d\\d\\d")
data <- readRDS(file)
#assign ID
participant_ID <- data$results$`sp_id`[[1]]
main_data <- data$results$`Main page`[[1]]
df <- read.table(text = main_data, sep =",", header = TRUE, stringsAsFactors = FALSE)
#df is the raw data, tells you stimulus and responses
##Ben Code Attempt***creating tidy data and choice bias score***
#First remove unneeded columns
data_cols <- df %>% select(c(trial_type,stimulus,response,left_image,right_image,correct_response,correct))
#Then Filter practice and experimental trials
data_prac <- data_cols %>% filter(grepl("Prac", stimulus, fixed = TRUE))
data_exp <- data_cols %>% filter(!grepl("Prac", stimulus, fixed = TRUE)) %>%
filter(trial_type  %in% c("bouba-kiki","image-keyboard-response")) %>%
filter(stimulus != "img/fixation.png")
#filter out BK data
data_exp_bk <-data_exp %>% filter(trial_type == "bouba-kiki")
#filter out the LG data
data_exp_lg <-data_exp %>% filter(trial_type =="image-keyboard-response") %>%
select(c(trial_type, stimulus, response))
#Now write a function to find if the left or the right image is "correct"
data_exp_bk <- data_exp_bk %>% mutate(correct_response = which_is_correct(stimulus,left_image,right_image))
data_exp_bk <- data_exp_bk %>% mutate(correct = ifelse(correct_response == response,
1,
ifelse(response == left_key | response == right_key,
0,
NA)))
data_exp_bk <- data_exp_bk %>% mutate(sound = ifelse(stimulus %in% c("sound/baba_rep.wav","sound/gaga_rep.wav"),
"round",
ifelse(stimulus %in% c("sound/teetee.wav","sound/keekee.wav"),
"spiky",
NA))) %>%
filter(!is.na(correct))
#adding columns to LG files to do analysis ############
data_exp_lg <- data_exp_lg %>% separate(stimulus, c("type","image_ID"), sep = "/")
data_exp_lg <- data_exp_lg %>% group_by(type) %>%
mutate(trial_num = row_number()) %>%
ungroup() %>%
pivot_wider(names_from = type, values_from = c(image_ID,response)) %>%
select(!c(trial_type,response_targets))
#file_path_bk <- paste0("LG CSV files Looped/",file_id,"_bk.csv")
file_path_lg <- paste0("LG tidy csv/confound/",file_id,"_lg.csv")
#file_path_prac <- paste0("LG practice trials/",file_id,".csv")
#write.csv(data_prac, file_path_prac)
#write.csv(data_exp_bk, file_path_bk)
write.csv(data_exp_lg, file_path_lg)
}
all_files_c <- list.files("LG tidy csv/confound")
first_file <- TRUE
#Adds ID code onto each trial, binds all individual csvs into one large dataframe
for(i in 1:length(all_files_c)){
if(grepl("b",all_files[i])){
print(all_files_c[i])
if(first_file){
LG_data_df_c <- read.csv(paste0("LG tidy csv/confound/",all_files_c[i]))
LG_data_df_c <- LG_data_df_c %>% mutate(ID = substr(all_files_c[i],1,6))
first_file <- FALSE
}
else{
LGnew_data_df_c <- read.csv(paste0("LG tidy csv/confound/",all_files_c[i]))
LGnew_data_df_c <- LGnew_data_df_c %>% mutate(ID = substr(all_files_c[i],1,6))
LG_data_df_c <- rbind(LG_data_df_c,LGnew_data_df_c)
}
}
}
#full_join to combine
LG_data_df_combined_c <- full_join(LG_data_df_c,target_table, by="image_ID_targets")
LG_data_df_combined_c <- full_join(LG_data_df_combined_c,pairs_table, by="image_ID_pairs")
#if the the global choice is on the left and they make the "z" response, then put G in the choice column, etc
LG_data_df_combined_bias_c <- LG_data_df_combined_c %>% mutate(choice = ifelse(response_pairs == left_key &
target_global == pair_left_global,
"global",
ifelse(response_pairs == left_key &
target_local == pair_left_local,
"local",
ifelse(response_pairs == right_key &
target_global == pair_right_global,
"global",
ifelse(response_pairs == right_key &
target_local == pair_right_local,
"local",
NA)))))
#calculate global bias: n(global)/n() ################
#for null responses, remove from total n(trials)
LG_data_df_combined_bias_c <- LG_data_df_combined_bias_c %>% mutate(choice_number = ifelse(choice == "global", 1, 0)) %>%
filter(!is.na(choice))
LG_count_c <-LG_data_df_combined_bias_c %>% group_by(ID) %>% count(choice)
LG_count_p_c <- LG_count %>% pivot_wider(names_from = choice, values_from = n) %>% mutate_all(~replace(., is.na(.), 0))
#new column with local-global
LG_count_p_c <- LG_count_p_c %>% mutate(GminusL = global-local) %>% mutate(LG_group = ifelse(GminusL >0, "global", "local"))
View(LG_count_p_c)
LG_count_c <-LG_data_df_combined_bias_c %>% group_by(ID) %>% count(choice)
LG_count_p_c <- LG_count_c %>% pivot_wider(names_from = choice, values_from = n) %>% mutate_all(~replace(., is.na(.), 0))
#new column with local-global
LG_count_p_c <- LG_count_p_c %>% mutate(GminusL = global-local) %>% mutate(LG_group = ifelse(GminusL >0, "global", "local"))
#what is the difference between confound trials or non confound trials participants?
# independent sample t-test (2 groups)
res1 <- t.test(global_bias ~ target_confound, data = LG_confound_trials_c)
#calculate global bias for confound trials and normal trials 2nd try
LG_confound_trials_c <- LG_data_df_combined_bias_c %>%
#filter(!ID  %in% c("blg040","blg041"))  %>%
group_by(ID, target_confound) %>%
summarise(global_bias = sum(choice_number)/n(), trials = n(), global_choices = sum(choice_number))
#what is the difference between confound trials or non confound trials participants?
# independent sample t-test (2 groups)
res1 <- t.test(global_bias ~ target_confound, data = LG_confound_trials_c)
# Printing the results
res1
View(LG_confound_trials_c)
#calculate global bias: n(global)/n() ################
#for null responses, remove from total n(trials)
LG_data_df_combined_bias_c <- LG_data_df_combined_bias_c %>% mutate(choice_number = ifelse(choice == "global", 1, 0)) %>%
filter(!is.na(choice))
#calculate global bias for confound trials and normal trials 2nd try
LG_confound_trials_c <- LG_data_df_combined_bias_c %>%
#filter(!ID  %in% c("blg040","blg041"))  %>%
group_by(ID, target_confound) %>%
summarise(global_bias = sum(choice_number)/n(), trials = n(), global_choices = sum(choice_number))
LG_count_p_c2 <- LG_data_df_combined_bias_c %>%
group_by(ID, target_confound) %>%
mutate(GminusL = global-local) %>% mutate(LG_group = ifelse(GminusL >0, "global", "local"))
View(LG_data_df_combined_bias_c)
##########################################################################
#POIREL COUNTING###
LG_count_c <-LG_data_df_combined_bias_c %>% group_by(ID,target_confound) %>% count(choice)
LG_count_p_c <- LG_count_c %>% pivot_wider(names_from = choice, values_from = n) %>% mutate_all(~replace(., is.na(.), 0))
#new column with local-global
LG_count_p_c <- LG_count_p_c %>% mutate(GminusL = global-local) %>% mutate(LG_group = ifelse(GminusL >0, "global", "local"))
##
LG_poirel_all_c <- full_join(LG_data_df_combined_bias_c, LG_count_p_c, by ="ID")
View(LG_poirel_all_c)
View(LG_data_df_combined_bias_c)
View(LG_bias_poirel)
#2 rows for each ID- local group and global group
LG_bias_poirel <- LG_poirel_all %>% group_by(Age, LG_group) %>%
summarize(mean_bias = mean(GminusL),
#is this making it too small because it's divided by group?
sd_bias = sd(GminusL),
n = n(),
se_bias=sd_bias/sqrt(n())) %>% ungroup()
View(LG_confound_trials_c)
View(LG_data_df_combined)
View(LG_data_df_combined_bias)
View(LG_bias_data)
#to count choice bias and see how many participants are in each age range
LG_bias_data <- LG_data_df_combined_bias %>% group_by(ID,Age) %>%
summarise(global_bias = sum(choice_number)/n()) %>%
group_by(Age) %>%
summarize(mean_bias = mean(global_bias),
sd_bias = sd(global_bias),
se_bias=sd_bias/sqrt(n()),
N=n()) %>% ungroup()
View(LG_poirel_all)
library(dplyr)
library(stringr)
library(tidyverse)
correct_stim_list = c("sound/baba_rep.wav" = "bouba",
"sound/gaga_rep.wav" = "bouba",
"sound/keekee.wav" = "kiki",
"sound/teetee.wav" = "kiki")
left_key = "z"
right_key = "m"
which_is_correct <- function(stimuli,lefts,rights) {
#Make a new vector the same length as the number of rows
correct_vec <- rep(NA,length(stimuli))
#For each row in the dataset....
for(i in seq(1:length(stimuli))){
#Get the correct type ("Bouba" or "Kiki") by checking in the stim list
correct_type <- correct_stim_list[stimuli[i]]
#If the correct type is in the left one the correct key was the left key
if(grepl(correct_type, lefts[i], fixed = TRUE)){
correct_key <- left_key
}
#If the correct type is in the right one the correct key was the right key
else if(grepl(correct_type, rights[i], fixed = TRUE)){
correct_key <- right_key
}
#If it isn't in either something has gone wrong so you'll get an NA
else{
correct_key <- NA
}
#Put that correct key in the output vector
correct_vec[i] <- correct_key
}
#Return the final filled in vector
return(correct_vec)
}
#look at the results files
rds_files <- list.files("LG_DI_five_rds",
pattern = "\\.rds$",
full.names = TRUE)
rds_files
#change [#] to pick which one to read
for(file in rds_files){
print(file)
file_id <- str_extract(file,"b[kl]g\\d\\d\\d")
data <- readRDS(file)
#assign ID
participant_ID <- data$results$`sp_id`[[1]]
main_data <- data$results$`Main page`[[1]]
df <- read.table(text = main_data, sep =",", header = TRUE, stringsAsFactors = FALSE)
#df is the raw data, tells you stimulus and responses
##Ben Code ***creating tidy data and choice bias score***
#First remove unneeded columns
data_cols <- df %>% select(c(trial_type,stimulus,response,left_image,right_image,correct_response,correct))
#Then Filter practice and experimental trials
data_prac <- data_cols %>% filter(grepl("Prac", stimulus, fixed = TRUE))
data_exp <- data_cols %>% filter(!grepl("Prac", stimulus, fixed = TRUE)) %>%
filter(trial_type  %in% c("bouba-kiki","image-keyboard-response")) %>%
filter(stimulus != "img/fixation.png")
#filter out BK data
data_exp_bk <-data_exp %>% filter(trial_type == "bouba-kiki")
#filter out the LG data
data_exp_lg <-data_exp %>% filter(trial_type =="image-keyboard-response") %>%
select(c(trial_type, stimulus, response))
#Now write a function to find if the left or the right image is "correct"
data_exp_bk <- data_exp_bk %>% mutate(correct_response = which_is_correct(stimulus,left_image,right_image))
data_exp_bk <- data_exp_bk %>% mutate(correct = ifelse(correct_response == response,
1,
ifelse(response == left_key | response == right_key,
0,
NA)))
data_exp_bk <- data_exp_bk %>% mutate(sound = ifelse(stimulus %in% c("sound/baba_rep.wav","sound/gaga_rep.wav"),
"round",
ifelse(stimulus %in% c("sound/teetee.wav","sound/keekee.wav"),
"spiky",
NA))) %>%
filter(!is.na(correct))
#adding columns to LG files to do analysis ############
data_exp_lg <- data_exp_lg %>% separate(stimulus, c("type","image_ID"), sep = "/")
data_exp_lg <- data_exp_lg %>% group_by(type) %>%
mutate(trial_num = row_number()) %>%
ungroup() %>%
pivot_wider(names_from = type, values_from = c(image_ID,response)) %>%
select(!c(trial_type,response_targets))
#file_path_bk <- paste0("LG CSV files Looped/",file_id,"_bk.csv")
file_path_lg <- paste0("LG_DI_five_csv/",file_id,"_lg.csv")
#file_path_prac <- paste0("LG practice trials/",file_id,".csv")
#write.csv(data_prac, file_path_prac)
#write.csv(data_exp_bk, file_path_bk)
write.csv(data_exp_lg, file_path_lg)
}
LG_poirel_plot2
?summarySEwithin()
library(tidyverse)
library(ggplot2)
storms %>% arrange(name) %>% group_by(name,year) %>% mutate(wind_diff = lead(wind) - wind)
?geom_text()

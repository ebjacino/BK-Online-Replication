age_group <- LG_poirel_all %>% filter(LG_group == "local") %>% filter(Range == "5")
# One-sample t-test
res <- t.test(age_sound$GminusL, mu = 0)
# One-sample t-test
res <- t.test(age_group$GminusL, mu = 0)
# Printing the results: significantly different from zero
res
#by range
lgm_mult <- glm(GminusL ~ Age*LG_group, data = LG_poirel_all)
lgm_add <- glm(GminusL ~ Age+LG_group, data = LG_poirel_all)
ICtab(lgm_mult, lgm_add)
Anova(lgm_mult)
contrast(emmeans(lgm_mult, ~ Age | LG_group) , method = "pairwise", type = "response")
#by range
lgm_mult <- glm(GminusL ~ Range*LG_group, data = LG_poirel_all)
ICtab(lgm_mult, lgm_add)
Anova(lgm_mult)
contrast(emmeans(lgm_mult, ~ Range | LG_group) , method = "pairwise", type = "response")
?select()
#make a new dataframe with the following columns for each ID: round/spiky bias scores, GminusL scores, LG_group assignment
LG_score_only <- LG_poirel_all %>% select(ID, Age, Range, GminusL, LG_group)
View(LG_score_only)
View(bk_data_combined_bias)
BK_bias_only <- bk_data_combined_bias %>% select(ID, sound, bias)
View(BK_bias_only)
BK_LG_scores <- full_join(LG_score_only, BK_bias_only, by="ID")
View(BK_LG_scores)
?pivot_wider()
BK_bias_only <- bk_data_combined_bias %>% select(ID, sound, bias) %>%
pivot_wider(names_from = sound, values_from = bias)
BK_bias_only <- bk_data_combined_bias %>% select(ID, sound, bias) %>%
pivot_wider(names_from = bias, values_from = sound)
BK_bias_only <- bk_data_combined_bias %>% select(ID, sound, bias) #%>%
BK_bias_only <- bk_data_combined_bias %>% select(ID, sound, bias) %>%
pivot_wider(names_from = sound, values_from = bias)
BK_bias_only <- bk_data_combined_bias %>% select(ID, sound, bias)
View(LG_bias_poirel)
#2 rows for each ID- local group and global group
LG_bias_poirel <- LG_poirel_all %>% group_by(Range, LG_group) %>%
summarize(mean_bias = mean(GminusL),
#is this making it too small because it's divided by group?
sd_bias = sd(GminusL),
se_bias=sd_bias/sqrt(n())) %>% ungroup()
#2 rows for each ID- local group and global group
LG_bias_poirel <- LG_poirel_all %>% group_by(Range, LG_group) %>%
summarize(mean_bias = mean(GminusL),
#is this making it too small because it's divided by group?
sd_bias = sd(GminusL),
se_bias=sd_bias/sqrt(n()),
N=n()) %>% ungroup()
#2 rows for each ID- local group and global group
LG_bias_poirel <- LG_poirel_all %>% group_by(Range, LG_group) %>%
summarize(mean_bias = mean(GminusL),
#is this making it too small because it's divided by group?
sd_bias = sd(GminusL),
se_bias=sd_bias/sqrt(n()),
N=n(unique(ID))) %>% ungroup()
#2 rows for each ID- local group and global group
LG_bias_poirel <- LG_poirel_all %>% group_by(Range, LG_group) %>%
summarize(mean_bias = mean(GminusL),
#is this making it too small because it's divided by group?
sd_bias = sd(GminusL),
se_bias=sd_bias/sqrt(n()),
N=count(unique(ID))) %>% ungroup()
#2 rows for each ID- local group and global group
LG_bias_poirel <- LG_poirel_all %>% group_by(Range, LG_group) %>%
summarize(mean_bias = mean(GminusL),
#is this making it too small because it's divided by group?
sd_bias = sd(GminusL),
se_bias=sd_bias/sqrt(n()),
N=count(ID)) %>% ungroup()
View(LG_bias_data)
#2 rows for each ID- local group and global group
LG_bias_poirel <- LG_poirel_all %>% group_by(Range, LG_group) %>%
#2 rows for each ID- local group and global group
LG_bias_poirel <- LG_poirel_all %>% group_by(Range, LG_group) %>%
summarize(mean_bias = mean(GminusL),
#is this making it too small because it's divided by group?
sd_bias = sd(GminusL),
se_bias=sd_bias/sqrt(n()),
N = length(unique(ID))) %>% ungroup()
?length()
#2 rows for each ID- local group and global group
LG_bias_poirel <- LG_poirel_all %>% group_by(Range, LG_group) %>%
#2 rows for each ID- local group and global group
LG_bias_poirel <- LG_poirel_all %>% group_by(Range, LG_group) %>%
summarize(mean_bias = mean(GminusL),
#is this making it too small because it's divided by group?
sd_bias = sd(GminusL),
se_bias=sd_bias/sqrt(n())) %>% ungroup()
#to count choice bias and see how many participants are in each age range
LG_bias_data <- LG_data_df_combined_bias %>% group_by(ID,Range) %>%
summarise(global_bias = sum(choice_number)/n()) %>%
group_by(Range) %>%
summarize(mean_bias = mean(global_bias),
sd_bias = sd(global_bias),
se_bias=sd_bias/sqrt(n()),
N=n()) %>% ungroup()
#2 rows for each ID- local group and global group
LG_bias_poirel <- LG_poirel_all %>% group_by(Range, LG_group) %>%
summarize(mean_bias = mean(GminusL),
#is this making it too small because it's divided by group?
sd_bias = sd(GminusL),
se_bias=sd_bias/sqrt(n())) %>% ungroup()
#in past analysis, N was number of trials
length(unique(LG_poirel_all$ID))
#in past analysis, N was number of trials
LG_group_count <- LG_poirel_all %>% group_by(Range, LG_group) %>% summarise(
length(unique(ID)))
View(LG_group_count)
LG_group_count
ggplot(
geom_point(LG_group_count, mapping = aes(x = interaction(LG_group,Range), y = length(unique(ID))))
)
#in past analysis, N was number of trials
LG_group_count <- LG_poirel_all %>% group_by(Range, LG_group) %>% summarise(
count = length(unique(ID)))
ggplot(
geom_point(LG_group_count, mapping = aes(x = interaction(LG_group,Range), y = count))
)
ggplot(
geom_bar(LG_group_count, mapping = aes(x = interaction(LG_group,Range), y = count))
)
ggplot(
geom_point(LG_group_count, mapping = aes(x = interaction(LG_group,Range), y = count))
)
ggplot(
geom_point(LG_group_count, mapping = aes(interaction(LG_group,Range), count))
)
ggplot(LG_group_count, aes(interaction(LG_group,Range), count) +
geom_point()
)
p <- ggplot(LG_group_count, aes(interaction(LG_group,Range), count))
p + geom_point()
LG_group_count <- LG_group_count %>% mutate(proportion = LG_group_count$count/LG_bias_data$N)
LG_group_count_p <- full_join(LG_group_count, LG_bias_data, by="Range")
View(LG_group_count_p)
LG_group_count_p <- LG_group_count_p %>% mutate(proportion = count/N)
p <- ggplot(LG_group_count_p, aes(interaction(LG_group,Range), proportion))
p + geom_point()
p + geom_point()+
theme_classic()
p + geom_point()
p + geom_point() +
theme(light)
p + geom_point() +
theme_light()
View(LG_count_p)
View(LG_group_count_p)
#average values but WEIGHTED by participants??
LG_weighted_avg <- LG_poirel_all %>% group_by(ID,Range) %>%
summarise(global_bias = sum(choice_number)/n())
View(LG_weighted_avg)
#average values but WEIGHTED by participants??
LG_weighted_avg <- LG_poirel_all %>% group_by(ID,Range, LG_group) %>%
summarise(global_bias = sum(choice_number)/n())
View(LG_poirel_all)
#average values but WEIGHTED by participants??
LG_weighted_avg <- LG_poirel_all %>% group_by(ID,Range, LG_group) %>%
summarise(bias = GminusL)
View(LG_weighted_avg)
#average values but WEIGHTED by participants??
LG_weighted_avg <- LG_poirel_all %>% group_by(ID,Range) %>%
summarise(bias = GminusL)
#average values but WEIGHTED by participants??
LG_weighted_avg <- LG_poirel_all %>% group_by(ID) %>%
summarise(bias = GminusL)
#average values but WEIGHTED by participants??
LG_weighted_avg <- LG_poirel_all %>% group_by(ID) %>%
summarise(bias = 1+1)
View(LG_weighted_avg)
#average values but WEIGHTED by participants??
LG_weighted_avg <- LG_poirel_all %>% group_by(ID) %>%
summarise(bias = GminusL)
#just an average??
LG_poirel_plot2 <-ggplot() +
geom_col(LG_bias_poirel, mapping = aes(x = LG_group, y = mean_bias), color = "black", fill = NA) +
geom_point(LG_poirel_points, mapping = aes(x = LG_group, y = bias_round, size = Count, color = Range)) +
geom_col(LG_bias_poirel, mapping = aes(x = LG_group, y = mean_bias, fill = Range), alpha = 0.5) +
geom_point(LG_bias_poirel, mapping = aes(x = LG_group, y = mean_bias)) +
geom_errorbar(LG_bias_poirel, mapping = aes(x = LG_group, y = mean_bias, ymin = mean_bias-se_bias, ymax = mean_bias+se_bias), alpha = 1) +
theme_classic() +
#facet_wrap("Range") +
#ylim(-0.5,0.5) +
ylab("Global Bias") +
#scale_color_manual(values = rev(cols)) +
#scale_fill_manual(values = rev(cols)) +
xlab("global and local groups in each age range") +
ylab("<local bias, global bias>")
LG_poirel_plot2
View(LG_bias_poirel)
#just an average??
LG_poirel_plot2 <-ggplot() +
geom_col(LG_bias_poirel, mapping = aes(x = LG_group, y = mean_bias), color = "black", fill = NA) +
geom_point(LG_poirel_points, mapping = aes(x = LG_group, y = bias_round, size = Count, color = Range)) +
geom_col(LG_bias_poirel, mapping = aes(x = LG_group, y = mean_bias, fill = Range), alpha = 0.5) +
geom_point(LG_bias_poirel, mapping = aes(x = LG_group, y = mean_bias)) +
geom_errorbar(LG_bias_poirel, mapping = aes(x = LG_group, y = mean_bias, ymin = mean_bias-se_bias, ymax = mean_bias+se_bias), alpha = 1) +
theme_classic() +
#facet_wrap("Range") +
#ylim(-0.5,0.5) +
ylab("Global Bias") +
#scale_color_manual(values = rev(cols)) +
#scale_fill_manual(values = rev(cols)) +
xlab("global and local groups in each age range") +
ylab("<local bias, global bias>")
View(LG_poirel_plot2)
LG_poirel_plot2
#just an average??
LG_poirel_plot2 <-ggplot() +
geom_col(LG_bias_poirel, mapping = aes(x = Range, y = mean_bias), color = "black", fill = NA) +
geom_point(LG_poirel_points, mapping = aes(x = Range, y = bias_round, size = Count, color = LG_group)) +
geom_col(LG_bias_poirel, mapping = aes(x = Range, y = mean_bias, fill = LG_group), alpha = 0.5) +
geom_point(LG_bias_poirel, mapping = aes(x = Range, y = mean_bias)) +
geom_errorbar(LG_bias_poirel, mapping = aes(x = Range, y = mean_bias, ymin = mean_bias-se_bias, ymax = mean_bias+se_bias), alpha = 1) +
theme_classic() +
#facet_wrap("Range") +
#ylim(-0.5,0.5) +
ylab("Global Bias") +
#scale_color_manual(values = rev(cols)) +
#scale_fill_manual(values = rev(cols)) +
xlab("global and local groups in each age range") +
ylab("<local bias, global bias>")
LG_poirel_plot2
View(LG_poirel_points)
LG_poirel_points <- LG_poirel_all  %>% group_by(ID,Range, LG_group) %>%
mutate(bias_round = round_any(GminusL,5)) %>%  ungroup() %>%
group_by(Range,bias_round,LG_group) %>%
summarise(Count = length(unique(ID)))
#just an average??
LG_poirel_plot2 <-ggplot() +
geom_col(LG_bias_poirel, mapping = aes(x = Range, y = mean_bias), color = "black", fill = NA) +
geom_point(LG_poirel_points, mapping = aes(x = Range, y = bias_round, size = Count, color = LG_group)) +
geom_col(LG_bias_poirel, mapping = aes(x = Range, y = mean_bias, fill = LG_group), alpha = 0.5) +
geom_point(LG_bias_poirel, mapping = aes(x = Range, y = mean_bias)) +
geom_errorbar(LG_bias_poirel, mapping = aes(x = Range, y = mean_bias, ymin = mean_bias-se_bias, ymax = mean_bias+se_bias), alpha = 1) +
theme_classic() +
#facet_wrap("Range") +
#ylim(-0.5,0.5) +
ylab("Global Bias") +
#scale_color_manual(values = rev(cols)) +
#scale_fill_manual(values = rev(cols)) +
xlab("global and local groups in each age range") +
ylab("<local bias, global bias>")
LG_poirel_plot2
#GRAPH TIME
LG_poirel_plot <-ggplot() +
geom_col(LG_bias_poirel, mapping = aes(x = interaction(LG_group,Range), y = mean_bias), color = "black", fill = NA) +
geom_point(LG_poirel_points, mapping = aes(x = interaction(LG_group,Range), y = bias_round, size = Count, color = Range)) +
geom_col(LG_bias_poirel, mapping = aes(x = interaction(LG_group,Range), y = mean_bias, fill = Range), alpha = 0.5) +
geom_point(LG_bias_poirel, mapping = aes(x = interaction(LG_group,Range), y = mean_bias)) +
geom_errorbar(LG_bias_poirel, mapping = aes(x = interaction(LG_group,Range), y = mean_bias, ymin = mean_bias-se_bias, ymax = mean_bias+se_bias), alpha = 1) +
theme_classic() +
#facet_wrap("Range") +
#ylim(-0.5,0.5) +
ylab("Global Bias") +
#scale_color_manual(values = rev(cols)) +
#scale_fill_manual(values = rev(cols)) +
xlab("global and local groups in each age range") +
ylab("<local bias, global bias>")
LG_poirel_plot
View(LG_bias_data)
#average values but WEIGHTED by participants??
LG_weighted_avg <- LG_poirel_all %>% group_by(Range) %>%
summarise(avg_bias = mean(GminusL))
View(LG_weighted_avg)
p + geom_point() +
theme_light()
#CALCULATE CHOICE BIAS
#group_by(ID,sound,group) group for when i have both adults and children
data_orth <- all_data_df %>% group_by(ID,sound) %>%
summarise(bias = sum(correct)/n())
setwd("~/Desktop/UMASS/BKonline data/BK-Online-Replication")
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(forcats)
library(bbmle)      # for ICtab()
library(car)        # for Anova()
library(readxl)
library("writexl")
angular_color = "#E01A4F"
curved_color = "#FFC05C"
third_color = "#80B8EF"
round_any <- function(x, accuracy, f=round){f(x/ accuracy) * accuracy}
all_files <- list.files("bko2 full paradigm CSVs")
first_file <- TRUE
#Adds ID code onto each trial, binds all individual csvs into one large dataframe
for(i in 1:length(all_files)){
if(grepl("b",all_files[i])){
print(all_files[i])
if(first_file){
all_data_df <- read.csv(paste0("bko2 full paradigm CSVs/",all_files[i]))
all_data_df <- all_data_df %>% mutate(ID = substr(all_files[i],1,6))
first_file <- FALSE
}
else{
new_data_df <- read.csv(paste0("bko2 full paradigm CSVs/",all_files[i]))
new_data_df <- new_data_df %>% mutate(ID = substr(all_files[i],1,6))
all_data_df <- rbind(all_data_df,new_data_df)
}
}
}
#filter out the NAs
all_data_df <- all_data_df %>% filter(!is.na(correct))
unique(all_data_df$ID)
left_key = "z"
right_key = "m"
age_table <- read_excel("bko2 age table.xlsx")
all_data_df <- full_join(all_data_df,age_table, by="ID")
#CALCULATE CHOICE BIAS
#group_by(ID,sound,group) group for when i have both adults and children
data_orth <- all_data_df %>% group_by(ID,sound) %>%
summarise(bias = sum(correct)/n())
data_all_sounds <- all_data_df %>% group_by(ID,sound,stimulus) %>%
summarise(bias = sum(correct)/n())
data_vowel_type <- all_data_df %>% group_by(vowel_type, ID) %>%
summarise(bias = sum(correct)/n())
data_congruency = all_data_df %>% group_by(congruent, ID) %>%
summarise(bias = sum(correct)/n())
data_voicing = all_data_df %>% group_by(voicing, ID) %>%
summarise(bias = sum(correct)/n())
data_consonant = all_data_df %>% group_by(consonant_type, ID) %>%
summarise(bias = sum(correct)/n())
#data_consonant_type = all_data_df_c %>% group_by(consonant_type, ID) %>%
#summarise(bias = sum(sharp_shape_choice)/n())
#listing comparisons for significance bars
#bias for orthography
orth_comparisons <- list( c("angular", "curved"))
#bias for vowel type
vowel_comparisions <- list( c("/a/", "/i/"))
#bias for congruency
congruency_comparisions <- list( c("congruent", "incongruent"))
#bias for voicing
voicing_comparisions <- list( c("unvoiced", "voiced"))
#bias for consonant type
consonant_comparisons <- list( c("stop", "fricative"),
c("fricative", "sonorant"),
c("stop", "sonorant"))
stimulus_bias_data <- all_data_df %>% mutate(stimulus = toupper(sub(".wav","",sub("sound/","",stimulus)))) %>%
group_by(ID,stimulus,sound,Range) %>%
summarise(bias = sum(correct)/n() - 0.5) %>%
mutate(bias = ifelse(sound == "angular",-1*bias,bias)) %>%
group_by(stimulus,sound,Range) %>%
summarize(mean_bias = mean(bias),
sd_bias = sd(bias),
se_bias=sd_bias/sqrt(n()),
N = n()) %>%
ungroup() %>%
mutate(stimulus = fct_reorder2(stimulus, sound, mean_bias))
stimulus_bias_data_points <- all_data_df %>% mutate(stimulus = toupper(sub(".wav","",sub("sound/","",stimulus)))) %>%
group_by(ID,stimulus,sound,Range) %>%
summarise(bias = sum(correct)/n() - 0.5) %>%
ungroup() %>%
mutate(bias = ifelse(sound == "angular",-1*bias,bias)) %>%
mutate(bias_round = round_any(bias,0.25)) %>%
group_by(stimulus,sound,bias) %>%
summarise(Count = n())
new_color_all_stim <- ggplot() +
geom_col(stimulus_bias_data, mapping = aes(x = stimulus, y = mean_bias), color = "black", fill = NA) +
geom_point(stimulus_bias_data_points, mapping =aes(x = stimulus, y = bias, size = Count, color= sound)) +
geom_col(stimulus_bias_data, mapping = aes(x = stimulus, y = mean_bias, fill = sound), alpha = 0.5) +
geom_point(stimulus_bias_data, mapping = aes(x = stimulus, y = mean_bias)) +
geom_errorbar(stimulus_bias_data, mapping = aes(x = stimulus, y = mean_bias, ymin = mean_bias-se_bias, ymax = mean_bias+se_bias), alpha = 1) +
scale_fill_manual(values = c(angular_color,curved_color)) +
scale_color_manual(values = c(angular_color,curved_color)) +
theme_classic() +
ylim(-0.5,0.5) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
ylab("Choice Bias") +
xlab("Stimulus") +
facet_wrap("Range")
new_color_all_stim
#ggsave("graphs/presentation graphs/kids_all_stim.png", width = 10, height = 5)
orth_new <- all_data_df %>% mutate(stimulus = toupper(sub(".wav","",sub("sound/","",stimulus)))) %>%
group_by(ID,sound,Range) %>%
summarise(bias = sum(correct)/n()- 0.5) %>%
mutate(bias = ifelse(sound == "angular",-1*bias,bias)) %>%
group_by(sound,Range) %>%
summarize(mean_bias = mean(bias),
sd_bias = sd(bias),
se_bias=sd_bias/sqrt(n()))
orth_new_points <- all_data_df %>% mutate(stimulus = toupper(sub(".wav","",sub("sound/","",stimulus)))) %>%
group_by(ID,sound,Range) %>%
summarise(bias = sum(correct)/n()- 0.5) %>%
ungroup() %>%
mutate(bias = ifelse(sound == "angular",-1*bias,bias)) %>%
mutate(bias_round = round_any(bias,0.25)) %>%
group_by(sound,bias_round) %>%
summarise(Count = n())
new_orthography <- ggplot(data_orth, aes(x = sound, y = bias)) +
geom_col(orth_new, mapping = aes(x = sound, y = mean_bias), color = "black", fill = NA) +
geom_point(orth_new_points, mapping = aes(x = sound, y = bias_round, size = Count, color = sound)) +
geom_col(orth_new, mapping = aes(x = sound, y = mean_bias, fill = sound), alpha = 0.5) +
geom_point(orth_new, mapping = aes(x = sound, y = mean_bias)) +
geom_errorbar(orth_new, mapping = aes(x = sound, y = mean_bias, ymin = mean_bias-se_bias, ymax = mean_bias+se_bias), alpha = 1, width = 0.5) +
#stat_compare_means(comparisons = orth_comparisons, label.y = c(1.2),
#label = "p.signif", hide.ns = FALSE) +
theme_classic() +
ylim(-.5, .5) +
scale_fill_manual(values = c(angular_color,curved_color)) +
scale_color_manual(values = c(angular_color,curved_color)) +
scale_size_continuous(breaks = c(5, 10, 15)) +
ylab("Choice Bias") +
xlab("Sound") +
facet_wrap("Range")
new_orthography
#ggsave("graphs/presentation graphs/sig orthography.png", height = 3.5, width = 3.5)
congruency_new <- all_data_df %>% group_by(congruent, ID,Range) %>%
summarise(bias = sum(correct)/n()) %>%
#mutate(bias = ifelse(congruent == "incongruent",-1*bias,bias)) %>%
#ungroup()%>%
group_by(congruent,Range) %>%
summarize(mean_bias = mean(bias),
sd_bias = sd(bias),
se_bias=sd_bias/sqrt(n()))
congruency_new_points <- all_data_df %>% mutate(stimulus = toupper(sub(".wav","",sub("sound/","",stimulus)))) %>%
group_by(congruent, ID,Range) %>%
summarise(bias = sum(correct)/n()) %>%
ungroup() %>%
#mutate(bias = ifelse(congruent == "incongruent",-1*bias,bias)) %>%
mutate(bias_round = round_any(bias,0.25)) %>%
group_by(congruent,bias_round,Range) %>%
summarise(Count = n())
congruency_plot_new <- ggplot(data_congruency, aes(x = congruent, y = bias)) +
geom_col(congruency_new, mapping = aes(x = congruent, y = mean_bias), color = "black", fill = NA) +
geom_point(congruency_new_points, mapping = aes(x = congruent, y = bias_round, size = Count, color = congruent)) +
geom_col(congruency_new, mapping = aes(x = congruent, y = mean_bias, fill = congruent), alpha = 0.5) +
geom_point(congruency_new, mapping = aes(x = congruent, y = mean_bias)) +
geom_errorbar(congruency_new, mapping = aes(x = congruent, y = mean_bias, ymin = mean_bias-se_bias, ymax = mean_bias+se_bias), alpha = 1, width = 0.5) +
stat_compare_means(comparisons = congruency_comparisions, label.y = c(1.2),
label = "p.signif", hide.ns = TRUE) +
scale_fill_manual(values = c(angular_color,curved_color)) +
scale_color_manual(values = c(angular_color,curved_color)) +
theme_classic() +
#ylim(-0.5,0.5) +
ylab("Choice Bias") +
scale_y_continuous(limits = c(0, 1.5), breaks = c(0.00, 0.25, 0.50, 0.75, 1)) +
xlab("Congruency") +
facet_wrap("Range")
congruency_plot_new
#ggsave("graphs/presentation graphs/congruency_plot_new.png", height = 3.5, width = 3.5)
congruency_plot_new <- ggplot(data_congruency, aes(x = congruent, y = bias)) +
geom_col(congruency_new, mapping = aes(x = congruent, y = mean_bias), color = "black", fill = NA) +
geom_point(congruency_new_points, mapping = aes(x = congruent, y = bias_round, size = Count, color = congruent)) +
geom_col(congruency_new, mapping = aes(x = congruent, y = mean_bias, fill = congruent), alpha = 0.5) +
geom_point(congruency_new, mapping = aes(x = congruent, y = mean_bias)) +
geom_errorbar(congruency_new, mapping = aes(x = congruent, y = mean_bias, ymin = mean_bias-se_bias, ymax = mean_bias+se_bias), alpha = 1, width = 0.5) +
#stat_compare_means(comparisons = congruency_comparisions, label.y = c(1.2),
#label = "p.signif", hide.ns = TRUE) +
scale_fill_manual(values = c(angular_color,curved_color)) +
scale_color_manual(values = c(angular_color,curved_color)) +
theme_classic() +
#ylim(-0.5,0.5) +
ylab("Choice Bias") +
scale_y_continuous(limits = c(0, 1.5), breaks = c(0.00, 0.25, 0.50, 0.75, 1)) +
xlab("Congruency") +
facet_wrap("Range")
congruency_plot_new
stim_m <- glm(correct ~ 0 + stimulus, data = all_data_df, family = binomial)
summary(stim_m)#$coefficients[,4]
stim_tib <- tibble(categories = row.names(summary(ben_m)$coefficients),
old_p = summary(stim_m)$coefficients[,4],
p_vals = p.adjust(summary(stim_m)$coefficients[,4], method = "bonferroni", n = 16),
p_val_print = sprintf("%.10f", p_vals),
sig = ifelse(p_vals<0.05, "significant", "nonsignificant"))
stim_tib <- tibble(categories = row.names(summary(stim_m)$coefficients),
old_p = summary(stim_m)$coefficients[,4],
p_vals = p.adjust(summary(stim_m)$coefficients[,4], method = "bonferroni", n = 16),
p_val_print = sprintf("%.10f", p_vals),
sig = ifelse(p_vals<0.05, "significant", "nonsignificant"))
stim_tib
stim_m <- glm(correct ~ 0 + stimulus+Range, data = all_data_df, family = binomial)
summary(stim_m)#$coefficients[,4]
stim_m <- glm(correct ~ 0 + stimulus*Range, data = all_data_df, family = binomial)
summary(stim_m)#$coefficients[,4]
stim_m <- glm(correct ~ 0 + stimulus:Range, data = all_data_df, family = binomial)
summary(stim_m)#$coefficients[,4]
stim_m <- glm(correct ~ 0 + stimulus, data = all_data_df, family = binomial)
summary(stim_m)#$coefficients[,4]
stim_m <- glm(correct ~ 0 + stimulus:Range, data = all_data_df, family = binomial)
summary(stim_m)#$coefficients[,4]
stim_tib <- tibble(categories = row.names(summary(stim_m)$coefficients),
old_p = summary(stim_m)$coefficients[,4],
p_vals = p.adjust(summary(stim_m)$coefficients[,4], method = "bonferroni", n = 16),
p_val_print = sprintf("%.10f", p_vals),
sig = ifelse(p_vals<0.05, "significant", "nonsignificant"))
stim_tib
summary(stim_m)$coefficients
stim_tib <- tibble(categories = row.names(summary(stim_m)$coefficients),
old_p = summary(stim_m)$coefficients[,4],
p_vals = p.adjust(summary(stim_m)$coefficients[,4], method = "bonferroni", n = 16),
p_val_print = sprintf("%.10f", p_vals),
sig = ifelse(p_vals<0.05, "significant", "nonsignificant"))
summary(stim_m)$coefficients[,4]
stim_tib <- tibble(categories = row.names(summary(stim_m)$coefficients),
old_p = summary(stim_m)$coefficients[,4],
p_vals = p.adjust(summary(stim_m)$coefficients[,4], method = "bonferroni", n = 16*3),
p_val_print = sprintf("%.10f", p_vals),
sig = ifelse(p_vals<0.05, "significant", "nonsignificant"))
stim_tib
# One-sample t-test
orth <- t.test(bias ~ sound, data = data_orth)
# Printing the results
orth
# One-sample t-test
orth <- t.test(bias ~ sound:Range, data = data_orth)
data_orth_age <- all_data_df %>% group_by(ID,sound,Range) %>%
summarise(bias = sum(correct)/n())
# One-sample t-test
orth <- t.test(bias ~ sound:Range, data = data_orth_age)
View(congruency_comparisions)
